# -*- coding: utf-8 -*-
"""credit_risk_scoring_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ytUM9i0z-LuvGWbw4Hl0pvxb4aFyx6H6
"""

import pandas as pd

df = pd.read_csv('/content/GermanCredit.csv')
df.head()

print(df.shape)

print(df.dtypes)

df.describe()

print(df['credit_risk'].value_counts())  # Check target distribution

print(df['credit_risk'].unique())

"""**Data Preprocessing**"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder

# Drop any rows with missing target values (if any)
df = df.dropna(subset=['credit_risk'])

# Separate features and target
X = df.drop('credit_risk', axis=1)
y = df['credit_risk']

# One-hot encode categorical variables
X = pd.get_dummies(X, drop_first=True)

# Scale numeric features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.3, random_state = 42 )

"""**Train a Logistic Regression Model**"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
print("ROC AUC Score: ", roc_auc_score(y_test, model.predict_proba(X_test)[:,1]))

"""# Evaluate & Interpret Results

*   Accuracy / ROC AUC
*   Confusion Matrix
*   Misclassification analysis




"""

import shap
explainer = shap.Explainer(model, X_train)
shap_values = explainer(X_test)
shap.plots.beeswarm(shap_values)

# Get the column names used in the model
feature_names = X.columns.tolist()

# Print the top 10 features with their indices
for i, name in enumerate(feature_names[:50]):  # Change 50 to however many features you want
    print(f"Feature {i}: {name}")

